# -*- coding: utf-8 -*-
"""AI project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dru-YILJX6bvwfwdky_6MI465vC0Ww9k
"""

pip install tf_siren

#importing libraries
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
from math import atan2
from tf_siren import SIRENModel
from skimage import io

#Reading the image to a numpy array
img=io.imread("https://wallpaperaccess.com/full/477393.jpg") 
data=np.array(img)
data.shape

sizex, sizey,value=data.shape
X=[]
Y=[]

#To Get the Input Data
for i in range(sizex):
    for j in range(sizey):
        x0 = i + 0.5
        y0 = j + 0.5
        x = (x0 - sizex / 2)
        y = (y0 - sizey / 2)
        X.append((x0, y0, sizex - x0, sizey - y0, (x**2+y**2)**(1/2), atan2(y0, x0)))

#To Get the value of each pixel        
for i in data:
    for j in i:
        Y.append(j)

X=np.array(X)
Y=np.array(Y)

#Defining the training and testing data
x_train=X
y_train=Y/255.0
x_test=X

#Defining the model
model=keras.Sequential()
model.add(layers.Dense(4096, input_dim=6, activation="sine"))
model.add(layers.Dense(3, activation="sigmoid"))
model.summary()

from google.colab import drive
drive.mount('/content/gdrive')

#saving weights of the model
model.save_weights('/content/sample_data/wgt/cp.h5')

model.compile(loss=keras.losses.MeanSquaredError(),
             optimizer=keras.optimizers.Adam(learning_rate=0.0001))

model.fit(x_train, y_train, batch_size=32768, epochs=700, shuffle=True)

#Predicting the image
end_img=model.predict(x_test)
end_img=end_img*255.0
end_img=end_img.reshape(sizex,sizey,3)
end_img = end_img.astype(np.uint8)
end_img=np.array(end_img)
end_img

#To show the predicted image
plt.imshow(cv2.cvtColor(end_img, cv2.COLOR_BGR2RGB))
plt.show()

#To predict the input image
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))


